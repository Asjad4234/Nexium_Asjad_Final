{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        944,
        496
      ],
      "id": "a0aed034-eb6d-4341-9dae-3ded99016127",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        816,
        304
      ],
      "id": "a86d4c08-3f9b-42f8-8c72-e5b4a2145175",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "f10ef59a-5c33-4e5c-85bf-3b6f0b042f82",
      "name": "Chat Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1376,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract chat response from AI Agent\nconst agentResponse = $input.first().json;\nconst reply = agentResponse.output || agentResponse.text || 'No response generated';\n\nreturn {\n  json: {\n    reply: reply,\n    success: true\n  }\n};"
      },
      "id": "fa9b24ca-dfb5-4957-8818-3dc7ad69e9de",
      "name": "Extract Chat Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate chat system prompt and unified chat prompt for Gemini AI\nconst data = $input.first().json;\nconst recipe = data.recipe;\nconst message = data.message;\nconst history = data.history || [];\nconst sessionId = data.sessionId || 'default-session';\n\nconst systemPrompt = `You are a cooking assistant for: ${recipe.name}\n\nRecipe: ${recipe.ingredients.map(ing => `${ing.name} (${ing.quantity})`).join(', ')}\nInstructions: ${recipe.instructions.join('\\n')}\n\nHelp with: substitutions, techniques, modifications, serving, nutrition, variations, tips.\nKeep responses focused and helpful.`;\n\nconst prompt = `${systemPrompt}\\n\\nUser question: ${message}`;\n\nreturn {\n  json: {\n    systemPrompt,\n    message,\n    history,\n    recipe,\n    sessionId, \n    prompt    \n  }\n};\n"
      },
      "id": "3c33fdbc-95ac-4854-b9ef-57974b2f18e4",
      "name": "Generate Chat Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "const payload = $input.first().json;\nconst body = payload.body || {};\n\n// Safely extract fields from body\nconst message = body.message;\nconst recipeId = body.recipeId;\nconst sessionId = body.sessionId || \"default-session\";\nconst history = Array.isArray(body.history) ? body.history : [];\n\n// Optional: Validate required fields\nif (!message || !recipeId) {\n  throw new Error(\"Message and recipeId are required\");\n}\n\nreturn {\n  json: {\n    message,\n    recipeId,\n    sessionId,\n    history\n  }\n};\n"
      },
      "id": "d4d941c1-0450-41eb-8826-b58999b8d957",
      "name": "Parse Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        64,
        304
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-assistant",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e8b633da-ca60-4098-8b45-d2b3dc8c0553",
      "name": "Chat Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -144,
        304
      ],
      "webhookId": "chat-assistant"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "d923eec5-5ddf-415e-96e2-9ca19188fff7",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1408,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add placeholder image and complete the recipe response\nconst data = $input.first().json;\nconst recipe = data.recipe;\nconst userId = data.userId;\n\n// Use a placeholder image from Unsplash (free)\nconst placeholderImage = `https://source.unsplash.com/1024x1024/?${encodeURIComponent(recipe.name + ' food')}`;\n\n// Create the complete response\nconst completeRecipe = {\n  ...recipe,\n  imgLink: placeholderImage,\n  userId: userId,\n  geminiPromptId: `generated-${Date.now()}`\n};\n\nreturn {\n  json: {\n    recipe: completeRecipe,\n    success: true\n  }\n};"
      },
      "id": "9ef8bd9c-a014-4a71-b924-c34c4f2330ef",
      "name": "Add Placeholder Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse the recipe from AI Agent response\nconst agentResponse = $input.first().json;\nconst recipeText = agentResponse.output || agentResponse.text || '';\n\n// Try to extract JSON from the response\nlet recipe;\ntry {\n  // Find JSON in the response (it might be wrapped in markdown)\n  const jsonMatch = recipeText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    recipe = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  // If parsing fails, create a basic recipe structure\n  recipe = {\n    name: \"Generated Recipe\",\n    ingredients: [],\n    instructions: [recipeText],\n    dietaryPreference: [],\n    additionalInformation: {\n      tips: \"\",\n      variations: \"\",\n      servingSuggestions: \"\",\n      nutritionalInformation: \"\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    recipe: recipe,\n    userId: $('Generate Recipe Prompt').first().json.userId || 'default-user'\n  }\n};"
      },
      "id": "8489934f-08ae-4f48-936a-cc5b6b57838e",
      "name": "Parse Recipe",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate recipe prompt for AI Agent (optimized for Gemini)\nconst data = $input.first().json;\n\n// Extract ingredient names from objects - ingredients are objects with name, id, quantity properties\nconst ingredientNames = data.ingredients.map(ing => ing.name).join(', ');\n\nconst dietaryPrefs = data.dietaryPreferences?.length > 0\n  ? `Dietary preferences: ${data.dietaryPreferences.join(', ')}. `\n  : '';\n\nconst prompt = `Create a delicious recipe using these specific ingredients: ${ingredientNames}. ${dietaryPrefs}\n\nIMPORTANT: The recipe MUST use the provided ingredients (${ingredientNames}). Do not substitute or replace them with other ingredients.\n\nProvide in this JSON format:\n{\n  \"name\": \"Recipe Name\",\n  \"ingredients\": [\n    {\"name\": \"Ingredient Name\", \"quantity\": \"Amount\"}\n  ],\n  \"instructions\": [\n    \"Step 1\",\n    \"Step 2\"\n  ],\n  \"dietaryPreference\": [\"vegan\", \"gluten-free\"],\n  \"additionalInformation\": {\n    \"tips\": \"Cooking tips\",\n    \"variations\": \"Recipe variations\",\n    \"servingSuggestions\": \"How to serve\",\n    \"nutritionalInformation\": \"Nutritional info\"\n  }\n}\n\nMake it creative and follow dietary preferences if specified. The recipe must incorporate the provided ingredients.`;\n\nreturn {\n  json: {\n    prompt: prompt,\n    sessionId: data.sessionId,\n    userId: data.userId\n  }\n};"
      },
      "id": "e577f434-bc9a-411e-989b-07e7cca4e67a",
      "name": "Generate Recipe Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract ingredients and dietary preferences from webhook payload\nconst payload = $input.first().json;\nconst body = payload.body;\n\nconst ingredients = body.ingredients || [];\nconst dietaryPreferences = body.dietaryPreferences || [];\nconst sessionId = body.sessionId;\nconst userId = body.userId;\n\n// Validate input\nif (!ingredients || ingredients.length === 0) {\n  throw new Error('No ingredients provided');\n}\n\n// Return data for processing\nreturn {\n  json: {\n    ingredients,\n    dietaryPreferences,\n    sessionId,\n    userId\n  }\n};"
      },
      "id": "2e2bfd64-3a86-4034-adc8-e39735d943e9",
      "name": "Parse Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        0
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-recipe",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "905d9633-5883-4960-a7f8-5aafaa22c8ee",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "generate-recipe"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are a helpful assistant. Provide the recipe as valid JSON as per the schema.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        624,
        0
      ],
      "id": "d03c9b40-0a17-486a-8ab4-53bf62856ccf",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        752,
        160
      ],
      "id": "89485081-63bd-42cb-a320-e6980ab8f803",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsCode": "// Mock recipe data for testing - replace with actual database lookup\nconst data = $input.first().json;\nconst recipeId = data.recipeId;\nconst sessionId = data.sessionId || 'default-session'; // safely carry forward\n\n// Mock recipe - in production, fetch from your database\nconst mockRecipe = {\n  name: \"Chicken Pasta\",\n  ingredients: [\n    { name: \"Chicken breast\", quantity: \"2 pieces\" },\n    { name: \"Pasta\", quantity: \"200g\" },\n    { name: \"Tomato sauce\", quantity: \"1 cup\" }\n  ],\n  instructions: [\n    \"Cook pasta according to package instructions\",\n    \"Grill chicken until cooked through\",\n    \"Combine pasta with tomato sauce and chicken\"\n  ],\n  dietaryPreference: [\"gluten-free\"],\n  additionalInformation: {\n    tips: \"Use gluten-free pasta for dietary restrictions\",\n    variations: \"Try with different sauces\",\n    servingSuggestions: \"Serve hot with fresh herbs\",\n    nutritionalInformation: \"High protein, moderate carbs\"\n  }\n};\n\nreturn {\n  json: {\n    ...data,\n    recipe: mockRecipe,\n    sessionId\n  }\n};\n"
      },
      "id": "e8497de9-328a-4a49-8380-d7aeaf91ae58",
      "name": "Recipe Lookup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare input for AI Agent\nconst data = $input.first().json;\nconst systemPrompt = data.systemPrompt;\nconst message = data.message;\nconst sessionId = data.sessionId || \"default-session\";  // fallback for testing\n\n// Format for LangChain Agent\nreturn {\n  json: {\n    input: `${systemPrompt}\\n\\nUser question: ${message}`,\n    sessionId: sessionId  //This is REQUIRED by the Simple Memory node\n  }\n};\n"
      },
      "id": "1b24586d-cd95-4873-bbbf-7b5d12f652b4",
      "name": "Prepare Agent Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        304
      ]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        608,
        160
      ],
      "id": "7cda7c84-85c5-46b9-b372-2d7ba6b25054",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "pFRCKONQP3aXf9SE",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        816,
        480
      ],
      "id": "a04e4608-89da-43d8-ac77-d6195bca6913",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "pFRCKONQP3aXf9SE",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Extract Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Extract Chat Response": {
      "main": [
        [
          {
            "node": "Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Chat Input": {
      "main": [
        [
          {
            "node": "Recipe Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recipe Lookup": {
      "main": [
        [
          {
            "node": "Generate Chat Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Chat Prompt": {
      "main": [
        [
          {
            "node": "Prepare Agent Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Agent Input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Placeholder Image": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Recipe": {
      "main": [
        [
          {
            "node": "Add Placeholder Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input": {
      "main": [
        [
          {
            "node": "Generate Recipe Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Recipe Prompt": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Parse Recipe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "422f459b-a52f-4f98-86cc-64e263c67d9b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2eeefd6c92a70ba9db0857726773d93accb31f1da0eb3f259b7feb06d1da5222"
  },
  "id": "vx8zAQsWfNP5z23J",
  "tags": []
}